#!/bin/bash


S_current=$(cd $(dirname $0) && pwd)
S_version=$1
S_trunk_fxmss_db="http://200.31.156.24/svn/02_FX_Dev/Source/trunk_fxmss/FXMSS_Database/01_FXMSS"
S_git_url="git@gitlab:FXMSS/fxmss.git"
S_release_version=`echo "${S_version}"|cut -d . -f 1-3`

f_getgitsqlfile()
{
if [ -d "${S_current}/fxmss" ];then
    echo "${S_current} directory exists fxmss directory.so need delete"
    rm -rf fxmss/
	if [ $? = 0 ];then
	    echo "delete fxmss directory is successfuly."
	else
	    echo "delete fxmss directory is failed."
		exit 1;
	fi
else
    echo "${S_current} directory not exists fxmss directory.so not need delete"
fi
git clone ${S_git_url}
cd fxmss
git checkout release${S_release_version}
git pull
if [ -f ${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/99-exclude-files/FXMSS_${S_release_version}_exclude_files.txt ];then
   S_newbranch_parent_branchname=`cat ${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/99-exclude-files/FXMSS_${S_release_version}_exclude_files.txt |grep ^db_parent_branchname|awk -F ":" '{print $2}'`
else
   echo "${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/99-exclude-files/FXMSS_${S_release_version}_exclude_files.txt files not exists.please create it on git."
   exit 1
fi
git checkout ${S_newbranch_parent_branchname}
git pull
git diff origin/${S_newbranch_parent_branchname} origin/release${S_release_version} --name-only fxmss_database |grep -i sql$|cut -d "/" -f 2-|sort -n > ${S_current}/${S_version}/release${S_release_version}_diff.txt
S_check_update_file=`diff ${S_current}/${S_version}/${S_version}-end-update-files.txt ${S_current}/${S_version}/release${S_release_version}_diff.txt`
if [ -z "${S_check_update_file}" ];then
    echo "The database files modified by version release${S_release_version} are all packaged."
else
    echo "The database files modified by version release${S_release_version} are not fully packaged(lack ${S_check_update_file} files).possibly because the files exists in the mainfest due to version merge.so please check origin/release${S_release_version}:fxmss/fxmss_database/01_FXMSS/01_scripts/99-exclude-files/FXMSS_${S_version}_exclude_files.txt files."
	exit 1
fi
cd ${S_current}
}

f_checkfileinfo()
{
if [ -d ${S_current}/${S_version} ];then
   cd ${S_current}/${S_version}
   S_versiondbpk=`ls -ltr|grep "${S_version}"|grep tgz$|awk '{print $NF}'`
   if [ -n "${S_versiondbpk}" ];then
      tar -zxvf "${S_versiondbpk}" > /dev/null 2>&1
      #find ${S_version}/ -type f |grep -v "build-01_FXMSS"|grep "01_scripts"|sort -k4nr -t '/' > ${S_version}tmp.txt
      echo "" > ${S_version}tmp.txt
      find ${S_version}/ -type f |grep -w "02_update"|sort -k4nr -t '/' >> ${S_version}tmp.txt
      find ${S_version}/ -type f |grep -w "01_scripts"|sort -k4nr -t '/' >> ${S_version}tmp.txt
      sed -i "/^$/d" ${S_version}tmp.txt
   else
      echo "current ${S_current}/${S_version} path not exists ${S_version} version db update package.please create it on the jenkins"
      exit 1
   fi
else
   echo "current ${S_current} path not exists ${S_version} version db update directory.please create it on the jenkins"
   exit 1
fi
}


f_dorollbackjob()
{
S_job_list=`cat ${S_version}tmp.txt|grep -w "14_job"`
if [ -n "${S_job_list}" ];then
   echo "current exists job update.so need rollback it."
   for sql in ${S_job_list}
     do   
       #S_jobwhatinfo=`cat ${sql}|grep -iw what|awk -F "=>" '{print $2}'|awk -F "(" '{print $1}'|sed -e "s/'//g" -e "s/[[:space:]]//g"`
       S_jobwhatinfo=`echo "${sql}"|awk -F "/" '{print $NF}'|awk -F "." '{print $1}'|tr '[a-z]' '[A-Z]'`
       S_jobwhatinfo_check=`cat ${sql}|tr '[a-z]' '[A-Z]'|grep -w "${S_jobwhatinfo}"`
       if [ -n "${S_jobwhatinfo_check}" ];then
          S_sql_file_name=`echo $sql|awk -F "/" '{print $NF}'`
		  find ${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/14_job/ -type f |grep -w "${S_sql_file_name}" > /dev/null 2>&1
          if [ $? = 0 ];then
             echo "${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/14_job/${S_sql_file_name} exists.so need drop and create."
             cat >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql <<EOF
BEGIN
   FOR v IN (SELECT job
               FROM user_jobs
              WHERE what like '${S_jobwhatinfo}%')
   LOOP
      DBMS_JOB.remove (v.job);
   END LOOP;

   COMMIT;
END;
/
EOF
             S_job_name=`echo "${sql}"|awk -F "/" '{print $NF}'|awk -F "." '{print $1}'`
             S_job_end=`echo "${sql}"|awk -F "/" '{print $NF}'|awk -F "." '{print $2}'`
			 cp ${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/14_job/${S_sql_file_name} ${S_version}/01_FXMSS/01_scripts/14_job/${S_job_name}-rollback.${S_job_end}
             echo "prompt  ----Begin to execute @./01_FXMSS/01_scripts/14_job/${S_job_name}-rollback.${S_job_end};" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
             echo "@./01_FXMSS/01_scripts/14_job/${S_job_name}-rollback.${S_job_end};" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
             echo "prompt  ----End to execute @./01_FXMSS/01_scripts/14_job/${S_job_name}-rollback.${S_job_end};" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
          else
             echo "${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/14_job/${S_sql_file_name} not exists.so need drop."
             cat >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql <<EOF
BEGIN
   FOR v IN (SELECT job
               FROM user_jobs
              WHERE what like '${S_jobwhatinfo}%')
   LOOP
      DBMS_JOB.remove (v.job);
   END LOOP;

   COMMIT;
END;
/
EOF
          fi
       else
          echo "ERROR:${sql} files The name of the file does not match the name in the file content."|tee -a ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
       fi
     done
     if [ -f ${S_version}/01_FXMSS/rollback-01_FXMSS.sql ];then
        echo "" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
     fi
else
   echo "current not exists job update.so not need rollback it."
fi
}


f_dorollbackpackage_body()
{
S_package_body_list=`cat ${S_version}tmp.txt|grep -w "12-package_body"`
if [ -n "${S_package_body_list}" ];then
   echo "current exists package_body update.so need rollback it."
   for sql in ${S_package_body_list}
     do
       #S_package_body_name=`cat ${sql}|grep -iw CREATE|grep -iw "PACKAGE BODY"|awk '{print $NF}'|tr '[a-z]' '[A-Z]'|sed -e "s/(//g" -e "s/[[:space:]]//g"|sed "s/FXMSS.//g"`
       S_package_body_name=`echo "${sql}"|awk -F "/" '{print $NF}'|awk -F "." '{print $1}'|tr '[a-z]' '[A-Z]'`
       S_package_body_name_check=`cat ${sql}|tr '[a-z]' '[A-Z]'|grep -w "${S_package_body_name}"`
       if [ -n "${S_package_body_name_check}" ];then
          S_sql_file_name=`echo $sql|awk -F "/" '{print $NF}'`
		  find ${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/12-package_body/ -type f |grep -w "${S_sql_file_name}" > /dev/null 2>&1
		  if [ $? = 0 ];then
              echo "${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/12-package_body/${S_sql_file_name} exists.so need backup."
              if [ ! -d ${S_version}/backup ];then
                 mkdir -p ${S_version}/backup
              fi
              cat >> ${S_version}/backup/backup_fxmss.sql <<EOF
SELECT 'CREATE OR REPLACE ' || text
  FROM user_source
 WHERE NAME = '${S_package_body_name}'  AND TYPE='PACKAGE BODY' AND ROWNUM = 1;
SELECT text
  FROM (SELECT line, text
          FROM user_source
         WHERE NAME = '${S_package_body_name}' AND TYPE='PACKAGE BODY')
 WHERE line >= 2
 order by line asc;
SELECT '/' FROM DUAL;

EOF
          else
              echo "${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/12-package_body/${S_sql_file_name} not exists.so need drop."
              echo "drop package body ${S_package_body_name};" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
          fi
       else
          echo "ERROR:${sql} files The name of the file does not match the name in the file content."|tee -a ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
       fi
     done
   if [ -f ${S_version}/01_FXMSS/rollback-01_FXMSS.sql ];then
      echo "" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
   fi
else
   echo "current not exists package_body update.so not need rollback it."
fi
}

f_dorollbackpackage()
{
S_package_list=`cat ${S_version}tmp.txt|grep -w "11-package"`
if [ -n "${S_package_list}" ];then
   echo "current exists package update.so need rollback it."
   for sql in ${S_package_list}
     do
       #S_package_name=`cat ${sql}|grep -iw CREATE|grep -iw "PACKAGE"|awk '{print $NF}'|tr '[a-z]' '[A-Z]'|sed -e "s/(//g" -e "s/[[:space:]]//g"|sed "s/FXMSS.//g"`
       S_package_name=`echo "${sql}"|awk -F "/" '{print $NF}'|awk -F "." '{print $1}'|tr '[a-z]' '[A-Z]'`
       S_package_name_check=`cat ${sql}|tr '[a-z]' '[A-Z]'|grep -w "${S_package_name}"`
       if [ -n "${S_package_name_check}" ];then
          S_sql_file_name=`echo $sql|awk -F "/" '{print $NF}'`
		  find ${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/11-package/ -type f |grep -w "${S_sql_file_name}" > /dev/null 2>&1
		  if [ $? = 0 ];then
              echo "${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/11-package/${S_sql_file_name} exists.so need backup."
              if [ ! -d ${S_version}/backup ];then
                 mkdir -p ${S_version}/backup
              fi
              cat >> ${S_version}/backup/backup_fxmss.sql <<EOF
SELECT 'CREATE OR REPLACE ' || text
  FROM user_source
 WHERE NAME = '${S_package_name}'  AND TYPE='PACKAGE' AND ROWNUM = 1;
SELECT text
  FROM (SELECT line, text
          FROM user_source
         WHERE NAME = '${S_package_name}' AND TYPE='PACKAGE')
 WHERE line >= 2
 order by line asc;
SELECT '/' FROM DUAL;

EOF
          else
              echo "${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/11-package/${S_sql_file_name} not exists.so need drop."
              echo "drop package ${S_package_name};" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
          fi
       else
          echo "ERROR:${sql} files The name of the file does not match the name in the file content."|tee -a ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
       fi
     done
   if [ -f ${S_version}/01_FXMSS/rollback-01_FXMSS.sql ];then  
      echo "" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql  
   fi
else
   echo "current not exists package update.so not need rollback it."
fi
}

f_dorollbackprocedure()
{
S_procedure_list=`cat ${S_version}tmp.txt|grep -w "10-procedure"`
if [ -n "${S_procedure_list}" ];then
   echo "current exists procedure update.so need rollback it."
   for sql in ${S_procedure_list}
     do
       #S_procedure_name=`cat "${sql}"|grep -iw CREATE|grep -iw PROCEDURE|awk '{print $(NF-1)$NF}'|tr '[a-z]' '[A-Z]'|sed -e "s/(//g" -e "s/[[:space:]]//g"`
       S_procedure_name=`echo "${sql}"|awk -F "/" '{print $NF}'|awk -F "." '{print $1}'|tr '[a-z]' '[A-Z]'`
       S_procedure_name_check=`cat ${sql}|tr '[a-z]' '[A-Z]'|grep -w "${S_procedure_name}"`
       if [ -n "${S_procedure_name_check}" ];then
          S_sql_file_name=`echo $sql|awk -F "/" '{print $NF}'`
		  find ${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/10-procedure/ -type f |grep -w "${S_sql_file_name}" > /dev/null 2>&1
		  if [ $? = 0 ];then
              echo "${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/10-procedure/${S_sql_file_name} exists.so need backup."
              if [ ! -d ${S_version}/backup ];then
                 mkdir -p ${S_version}/backup
              fi
              cat >> ${S_version}/backup/backup_fxmss.sql <<EOF
SELECT 'CREATE OR REPLACE ' || text
  FROM user_source
 WHERE NAME = '${S_procedure_name}'  AND TYPE='PROCEDURE' AND ROWNUM = 1;
SELECT text
  FROM (SELECT line, text
          FROM user_source
         WHERE NAME = '${S_procedure_name}' AND TYPE='PROCEDURE')
 WHERE line >= 2
 order by line asc;
SELECT '/' FROM DUAL;

EOF
          else
              echo "${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/10-procedure/${S_sql_file_name} not exists.so need drop."
              echo "drop PROCEDURE ${S_procedure_name};" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
          fi
       else
          echo "ERROR:${sql} files The name of the file does not match the name in the file content."|tee -a ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
       fi
     done
   if [ -f ${S_version}/01_FXMSS/rollback-01_FXMSS.sql ];then
      echo "" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql  
   fi
else
   echo "current not exists package update.so not need rollback it."
fi
}

f_dorollbackindex()
{
S_index_list=`cat ${S_version}tmp.txt|grep -w "09-index"`
if [ -n "${S_index_list}" ];then
   echo "current exists index update.so need rollback it."
   for sql in ${S_index_list}
     do
        #echo `cat ${sql}|grep -iw create|grep -iw index|tr '[a-z]' '[A-Z]'|sed "s/FXMSS.//g"|awk '{if ($2 == "INDEX") {print "drop "$2" "$3";"} else if ($2 == "BITMAP"){print "drop "$3" "$4";"} else {print "this no defined DDL sql file"}}'` >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
        S_index_name=`echo "${sql}"|awk -F "/" '{print $NF}'|awk -F "." '{print $1}'|tr '[a-z]' '[A-Z]'`
        S_index_name_check=`cat ${sql}|tr '[a-z]' '[A-Z]'|grep -w "${S_index_name}"`
        if [ -n "${S_index_name_check}" ];then
           echo "drop INDEX ${S_index_name};" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
        else
           echo "ERROR:${sql} files The name of the file does not match the name in the file content."|tee -a ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
        fi
     done
   if [ -f ${S_version}/01_FXMSS/rollback-01_FXMSS.sql ];then
      echo "" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql  
   fi
else
   echo "current not exists index update.so not need rollback it."
fi
}

f_dorollbackpk()
{
S_pk_list=`cat ${S_version}tmp.txt|grep -w "07-pk"`
if [ -n "${S_pk_list}" ];then
   echo "current exists pk update.so need rollback it."
   for sql in ${S_pk_list}
     do
        #echo `cat ${sql}|grep -iw alter|grep -iw table|awk '{print $3}'|sed "s/[[:space:]]//g"|sed "s/FXMSS.//g"|awk '{print "ALTER TABLE "$1" DROP PRIMARY KEY CASCADE;"}'` >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
        S_pk_table_name=`echo "${sql}"|awk -F "/" '{print $NF}'|awk -F "." '{print $1}'|tr '[a-z]' '[A-Z]'|sed "s/PK_//g"`
        S_pk_table_name_check=`cat ${sql}|tr '[a-z]' '[A-Z]'|grep -w "${S_pk_table_name}"`
        if [ -n "${S_pk_table_name_check}" ];then
           echo "ALTER TABLE ${S_pk_table_name} DROP PRIMARY KEY CASCADE;" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
        else
           echo "ERROR:${sql} files The name of the file does not match the name in the file content."|tee -a ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
        fi
     done
   if [ -f ${S_version}/01_FXMSS/rollback-01_FXMSS.sql ];then
      echo "" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql  
   fi
else
   echo "current not exists pk update.so not need rollback it."
fi
}

f_dorollbackview()
{
S_view_list=`cat ${S_version}tmp.txt|grep -w "06-view"`
if [ -n "${S_view_list}" ];then
   echo "current exists view update.so need rollback it."
   for sql in ${S_view_list}
     do
        S_view_name=`echo "${sql}"|awk -F "/" '{print $NF}'|awk -F "." '{print $1}'|tr '[a-z]' '[A-Z]'`
        S_view_name_check=`cat ${sql}|tr '[a-z]' '[A-Z]'|grep -w "${S_view_name}"`
        if [ -n "${S_view_name_check}" ];then
           S_sql_file_name=`echo $sql|awk -F "/" '{print $NF}'`
		   find ${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/06-view/ -type f |grep -w "${S_sql_file_name}" > /dev/null 2>&1
		   if [ $? = 0 ];then
              echo "${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/06-view/${S_sql_file_name} exists.so need export and rename rollback files."
              S_file_view_name=`echo "${sql}"|awk -F "/" '{print $NF}'|awk -F "." '{print $1}'`
              S_file_view_end=`echo "${sql}"|awk -F "/" '{print $NF}'|awk -F "." '{print $2}'`
              cp ${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/06-view/${S_sql_file_name} ${S_version}/01_FXMSS/01_scripts/06-view/${S_file_view_name}-rollback.${S_file_view_end}
			  echo "prompt  ----Begin to execute @./01_FXMSS/01_scripts/06-view/${S_file_view_name}-rollback.${S_file_view_end};" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
              echo "@./01_FXMSS/01_scripts/06-view/${S_file_view_name}-rollback.${S_file_view_end};" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
              echo "prompt  ----End to execute @./01_FXMSS/01_scripts/06-view/${S_file_view_name}-rollback.${S_file_view_end};" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
              echo "" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
           else
              echo "${S_current}/fxmss/fxmss_database/01_FXMSS/01_scripts/06-view/${S_sql_file_name} not exists.so need drop."
              echo "drop view ${S_view_name};" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
           fi
        else
           echo "ERROR:${sql} files The name of the file does not match the name in the file content."|tee -a ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
        fi
     done
   if [ -f ${S_version}/01_FXMSS/rollback-01_FXMSS.sql ];then
      echo "" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql  
   fi
else
   echo "current not exists view update.so not need rollback it."
fi
}

f_dorollbacktable()
{
S_table_list=`cat ${S_version}tmp.txt|grep -w "05-table"`
if [ -n "${S_table_list}" ];then
   echo "current exists table update.so need rollback it."
   for sql in ${S_table_list}
     do
        #echo `cat ${sql}|grep -iw create|grep -iw table|awk '{print $NF}'|tr '[a-z]' '[A-Z]'|sed "s/(//g"|sed "s/[[:space:]]//g"|sed "s/FXMSS.//g"|awk '{print "drop table "$0" cascade constraints;"}'` >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
        S_table_name=`echo "${sql}"|awk -F "/" '{print $NF}'|awk -F "." '{print $1}'|tr '[a-z]' '[A-Z]'`
        S_table_name_check=`cat ${sql}|tr '[a-z]' '[A-Z]'|grep -w "${S_table_name}"`
        if [ -n "${S_table_name_check}" ];then
           echo "drop TABLE ${S_table_name} cascade constraints;" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
        else
           echo "ERROR:${sql} files The name of the file does not match the name in the file content."|tee -a ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
        fi
     done
   if [ -f ${S_version}/01_FXMSS/rollback-01_FXMSS.sql ];then
      echo "" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql  
   fi
else
   echo "current not exists table update.so not need rollback it."
fi
}

f_dorollbacksequence()
{
S_sequence_list=`cat ${S_version}tmp.txt|grep -w "03-sequence"`
if [ -n "${S_sequence_list}" ];then
   echo "current exists sequence update.so need rollback it."
   for sql in ${S_sequence_list}
     do
        #echo `cat ${sql}|grep -iw CREATE|grep -iw SEQUENCE|awk '{print $NF}'|tr '[a-z]' '[A-Z]'|sed "s/[[:space:]]//g"|sed "s/FXMSS.//g"|awk '{print "drop SEQUENCE "$0";"}'` >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
        S_sequence_name=`echo "${sql}"|awk -F "/" '{print $NF}'|awk -F "." '{print $1}'|tr '[a-z]' '[A-Z]'`
        S_sequence_name_check=`cat ${sql}|tr '[a-z]' '[A-Z]'|grep -w "${S_sequence_name}"`
        if [ -n "${S_sequence_name_check}" ];then
           echo "drop SEQUENCE ${S_sequence_name};" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
        else
           echo "ERROR:${sql} files The name of the file does not match the name in the file content."|tee -a ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
        fi
     done
   if [ -f ${S_version}/01_FXMSS/rollback-01_FXMSS.sql ];then
      echo "" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql  
   fi
else
   echo "current not exists sequence update.so not need rollback it."
fi
}


if [ -z "$1" ];then
    echo "usage:./rollbackdb version"
    echo "such as: ./rollbackdb 1.6.0.0"
    exit;
else
    f_getgitsqlfile
    f_checkfileinfo
    f_dorollbackjob
    f_dorollbackpackage_body
    f_dorollbackpackage
    f_dorollbackprocedure
    f_dorollbackindex
    f_dorollbackpk
    f_dorollbackview
    f_dorollbacktable
    f_dorollbacksequence
    if [ -f ${S_version}/backup/backup_fxmss.sql ];then
       sed -i '$d' ${S_version}/backup/backup_fxmss.sql
    fi
    
    if [ -f ${S_version}/01_FXMSS/rollback-01_FXMSS.sql ];then
       sed -i '$d' ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
       echo "commit;" >> ${S_version}/01_FXMSS/rollback-01_FXMSS.sql
    fi
    find ${S_version}/ -type f|sort -n|cut -d "/" -f 2-|awk -F "/" -v version=${S_version} 'gsub($(NF),","$(NF)","version,$0)' > ${S_version}publist.csv
    echo -e "./,rebuild_rollback.sql,${S_version}\n./,rebuild_update.sql,${S_version}\n./,rollback.sh,${S_version}\n./,update.sh,${S_version}" >> ${S_version}publist.csv
    rm -rf "${S_versiondbpk}"
    tar -zcvf "${S_versiondbpk}" ${S_version}/ > /dev/null 2>&1
    rm -rf ${S_version}/
fi
